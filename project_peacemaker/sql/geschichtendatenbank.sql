/* ---------------------------------------------------- */
/*  Generated by Enterprise Architect Version 12.0 		*/
/*  Created On : 21-Dez-2015 13:09:12 				*/
/*  DBMS       : Firebird 						*/
/* ---------------------------------------------------- */

/* Drop Foreign Key Constraints */

SET TERM ^ ;
EXECUTE BLOCK AS
BEGIN
    IF (EXISTS(
        SELECT 1 FROM RDB$RELATION_CONSTRAINTS
        WHERE RDB$CONSTRAINT_NAME = 'FK_GESCHICHTEFIGUR_GESCHICHTE'
    )) THEN
        EXECUTE STATEMENT 'ALTER TABLE GESCHICHTEFIGUR DROP CONSTRAINT FK_GESCHICHTEFIGUR_GESCHICHTE';
END ^
SET TERM ; ^
;

SET TERM ^ ;
EXECUTE BLOCK AS
BEGIN
    IF (EXISTS(
        SELECT 1 FROM RDB$RELATION_CONSTRAINTS
        WHERE RDB$CONSTRAINT_NAME = 'FK_GESCHICHTE_AUTOR'
    )) THEN
        EXECUTE STATEMENT 'ALTER TABLE GESCHICHTE DROP CONSTRAINT FK_GESCHICHTE_AUTOR';
END ^
SET TERM ; ^
;

SET TERM ^ ;
EXECUTE BLOCK AS
BEGIN
    IF (EXISTS(
        SELECT 1 FROM RDB$RELATION_CONSTRAINTS
        WHERE RDB$CONSTRAINT_NAME = 'FK_GESCHICHTE_GENRE'
    )) THEN
        EXECUTE STATEMENT 'ALTER TABLE GESCHICHTE DROP CONSTRAINT FK_GESCHICHTE_GENRE';
END ^
SET TERM ; ^
;

SET TERM ^ ;
EXECUTE BLOCK AS
BEGIN
    IF (EXISTS(
        SELECT 1 FROM RDB$RELATION_CONSTRAINTS
        WHERE RDB$CONSTRAINT_NAME = 'FK_GESCHICHTE_LAND'
    )) THEN
        EXECUTE STATEMENT 'ALTER TABLE GESCHICHTE DROP CONSTRAINT FK_GESCHICHTE_LAND';
END ^
SET TERM ; ^
;

/* Drop Triggers for Autonumber Columns */

SET TERM ^ ;
EXECUTE BLOCK AS
BEGIN
    IF (EXISTS(
        SELECT 1 FROM RDB$TRIGGERS
        WHERE RDB$SYSTEM_FLAG = 0
        AND RDB$RELATION_NAME = 'LAND'
        AND RDB$TRIGGER_NAME = 'SET_LAND_ID'
    )) THEN
        EXECUTE STATEMENT 'DROP TRIGGER SET_LAND_ID';
END ^
SET TERM ; ^

;
SET TERM ^ ;
EXECUTE BLOCK AS
BEGIN
    IF (EXISTS(
        SELECT 1 FROM RDB$GENERATORS
        WHERE RDB$SYSTEM_FLAG = 0
        AND RDB$GENERATOR_NAME = 'LAND_ID_INC'
    )) THEN
        EXECUTE STATEMENT 'DELETE FROM RDB$GENERATORS WHERE RDB$GENERATOR_NAME = ''LAND_ID_INC''';
END ^
SET TERM ; ^

SET TERM ^ ;
EXECUTE BLOCK AS
BEGIN
    IF (EXISTS(
        SELECT 1 FROM RDB$TRIGGERS
        WHERE RDB$SYSTEM_FLAG = 0
        AND RDB$RELATION_NAME = 'GESCHICHTE'
        AND RDB$TRIGGER_NAME = 'SET_GESCHICHTE_ID'
    )) THEN
        EXECUTE STATEMENT 'DROP TRIGGER SET_GESCHICHTE_ID';
END ^
SET TERM ; ^

;
SET TERM ^ ;
EXECUTE BLOCK AS
BEGIN
    IF (EXISTS(
        SELECT 1 FROM RDB$GENERATORS
        WHERE RDB$SYSTEM_FLAG = 0
        AND RDB$GENERATOR_NAME = 'GESCHICHTE_ID_INC'
    )) THEN
        EXECUTE STATEMENT 'DELETE FROM RDB$GENERATORS WHERE RDB$GENERATOR_NAME = ''GESCHICHTE_ID_INC''';
END ^
SET TERM ; ^

SET TERM ^ ;
EXECUTE BLOCK AS
BEGIN
    IF (EXISTS(
        SELECT 1 FROM RDB$TRIGGERS
        WHERE RDB$SYSTEM_FLAG = 0
        AND RDB$RELATION_NAME = 'GENRE'
        AND RDB$TRIGGER_NAME = 'SET_GENRE_ID'
    )) THEN
        EXECUTE STATEMENT 'DROP TRIGGER SET_GENRE_ID';
END ^
SET TERM ; ^

;
SET TERM ^ ;
EXECUTE BLOCK AS
BEGIN
    IF (EXISTS(
        SELECT 1 FROM RDB$GENERATORS
        WHERE RDB$SYSTEM_FLAG = 0
        AND RDB$GENERATOR_NAME = 'GENRE_ID_INC'
    )) THEN
        EXECUTE STATEMENT 'DELETE FROM RDB$GENERATORS WHERE RDB$GENERATOR_NAME = ''GENRE_ID_INC''';
END ^
SET TERM ; ^

SET TERM ^ ;
EXECUTE BLOCK AS
BEGIN
    IF (EXISTS(
        SELECT 1 FROM RDB$TRIGGERS
        WHERE RDB$SYSTEM_FLAG = 0
        AND RDB$RELATION_NAME = 'FIGUR'
        AND RDB$TRIGGER_NAME = 'SET_FIGUR_ID'
    )) THEN
        EXECUTE STATEMENT 'DROP TRIGGER SET_FIGUR_ID';
END ^
SET TERM ; ^

;
SET TERM ^ ;
EXECUTE BLOCK AS
BEGIN
    IF (EXISTS(
        SELECT 1 FROM RDB$GENERATORS
        WHERE RDB$SYSTEM_FLAG = 0
        AND RDB$GENERATOR_NAME = 'FIGUR_ID_INC'
    )) THEN
        EXECUTE STATEMENT 'DELETE FROM RDB$GENERATORS WHERE RDB$GENERATOR_NAME = ''FIGUR_ID_INC''';
END ^
SET TERM ; ^

SET TERM ^ ;
EXECUTE BLOCK AS
BEGIN
    IF (EXISTS(
        SELECT 1 FROM RDB$TRIGGERS
        WHERE RDB$SYSTEM_FLAG = 0
        AND RDB$RELATION_NAME = 'AUTOR'
        AND RDB$TRIGGER_NAME = 'SET_AUTOR_ID'
    )) THEN
        EXECUTE STATEMENT 'DROP TRIGGER SET_AUTOR_ID';
END ^
SET TERM ; ^

;
SET TERM ^ ;
EXECUTE BLOCK AS
BEGIN
    IF (EXISTS(
        SELECT 1 FROM RDB$GENERATORS
        WHERE RDB$SYSTEM_FLAG = 0
        AND RDB$GENERATOR_NAME = 'AUTOR_ID_INC'
    )) THEN
        EXECUTE STATEMENT 'DELETE FROM RDB$GENERATORS WHERE RDB$GENERATOR_NAME = ''AUTOR_ID_INC''';
END ^
SET TERM ; ^

/* Create Tables */

RECREATE TABLE LAND
(
	ID integer NOT NULL,
	BEZEICHNUNG varchar(50)
)
;

RECREATE TABLE GESCHICHTEFIGUR
(
	GESCHICHTE_ID integer NOT NULL,
	FIGUR_ID integer NOT NULL
)
;

RECREATE TABLE GESCHICHTE
(
	ID integer NOT NULL,
	AUTOR_ID integer,
	LAND_ID integer,
	GENRE_ID integer,
	BEZEICHNUNG varchar(50),
	ENTSTEHUNGSJAHR smallint,
	TEXT blob sub_type 1
)
;

RECREATE TABLE GENRE
(
	ID integer NOT NULL,
	BEZEICHNUNG varchar(50)
)
;

RECREATE TABLE FIGUR
(
	ID integer NOT NULL,
	VORNAME varchar(50),
	NAME varchar(50)
)
;

RECREATE TABLE AUTOR
(
	ID integer NOT NULL,
	VORNAME varchar(50),
	NAME varchar(50)
)
;

/* Create Comment, Triggers, Generators for Autonumber Columns */

CREATE GENERATOR LAND_ID_INC;

SET TERM ^ ;
RECREATE TRIGGER SET_LAND_ID FOR LAND ACTIVE 
  BEFORE INSERT POSITION 0
  AS BEGIN
    IF (NEW.ID IS NULL)
      THEN NEW.ID = GEN_ID(LAND_ID_INC,1);
  END ^
SET TERM ; ^
;

CREATE GENERATOR GESCHICHTE_ID_INC;

SET TERM ^ ;
RECREATE TRIGGER SET_GESCHICHTE_ID FOR GESCHICHTE ACTIVE 
  BEFORE INSERT POSITION 0
  AS BEGIN
    IF (NEW.ID IS NULL)
      THEN NEW.ID = GEN_ID(GESCHICHTE_ID_INC,1);
  END ^
SET TERM ; ^
;

CREATE GENERATOR GENRE_ID_INC;

SET TERM ^ ;
RECREATE TRIGGER SET_GENRE_ID FOR GENRE ACTIVE 
  BEFORE INSERT POSITION 0
  AS BEGIN
    IF (NEW.ID IS NULL)
      THEN NEW.ID = GEN_ID(GENRE_ID_INC,1);
  END ^
SET TERM ; ^
;

CREATE GENERATOR FIGUR_ID_INC;

SET TERM ^ ;
RECREATE TRIGGER SET_FIGUR_ID FOR FIGUR ACTIVE 
  BEFORE INSERT POSITION 0
  AS BEGIN
    IF (NEW.ID IS NULL)
      THEN NEW.ID = GEN_ID(FIGUR_ID_INC,1);
  END ^
SET TERM ; ^
;

CREATE GENERATOR AUTOR_ID_INC;

SET TERM ^ ;
RECREATE TRIGGER SET_AUTOR_ID FOR AUTOR ACTIVE 
  BEFORE INSERT POSITION 0
  AS BEGIN
    IF (NEW.ID IS NULL)
      THEN NEW.ID = GEN_ID(AUTOR_ID_INC,1);
  END ^
SET TERM ; ^
;

/* Create Primary Keys, Indexes, Unique and Check Constraints, and Triggers */

ALTER TABLE LAND ADD CONSTRAINT PK_LAND
	PRIMARY KEY (ID)
;

ALTER TABLE GESCHICHTEFIGUR ADD CONSTRAINT PK_GESCHICHTEFIGUR
	PRIMARY KEY (GESCHICHTE_ID,FIGUR_ID)
;

ALTER TABLE GESCHICHTE ADD CONSTRAINT PK_GESCHICHTE
	PRIMARY KEY (ID)
;

ALTER TABLE GENRE ADD CONSTRAINT PK_GESCHICHTE_TYP
	PRIMARY KEY (ID)
;

ALTER TABLE FIGUR ADD CONSTRAINT PK_FIGUR
	PRIMARY KEY (ID)
;

ALTER TABLE AUTOR ADD CONSTRAINT PK_AUTHOR
	PRIMARY KEY (ID)
;

/* Create Foreign Key Constraints */

ALTER TABLE GESCHICHTEFIGUR 
 ADD CONSTRAINT FK_GESCHICHTEFIGUR_GESCHICHTE
	FOREIGN KEY (GESCHICHTE_ID) REFERENCES GESCHICHTE (ID) 
		ON DELETE Cascade 
		ON UPDATE Cascade
;

ALTER TABLE GESCHICHTE 
 ADD CONSTRAINT FK_GESCHICHTE_AUTOR
	FOREIGN KEY (AUTOR_ID) REFERENCES AUTOR (ID) 
		ON DELETE No Action 
		ON UPDATE No Action
;

ALTER TABLE GESCHICHTE 
 ADD CONSTRAINT FK_GESCHICHTE_GENRE
	FOREIGN KEY (GENRE_ID) REFERENCES GENRE (ID) 
		ON DELETE No Action 
		ON UPDATE No Action
;

ALTER TABLE GESCHICHTE 
 ADD CONSTRAINT FK_GESCHICHTE_LAND
	FOREIGN KEY (LAND_ID) REFERENCES LAND (ID) 
		ON DELETE No Action 
		ON UPDATE No Action
;
